const { handlers: { AbstractActionHandler } } = require("../../dist/")

//you have to store the indexState data, but aside from that you can store as much or as little as you want in this JSON object.
const state = { volumeBySymbol: {}, totalTransfers: 0, indexState: { blockNumber: 0, blockHash: "" } } // Initial state

//this class has to override the abstract methods in AbstractActionHandler.
//it's responsible for updating the block index states. 
class ObjectActionHandler extends AbstractActionHandler {
	//this is defined so the parent AbstractActionHandler has access to the state.
	//kind of like a tie between ObjectActionHandler, AbstractActionHandler, and the updaters
	//and effects.
  async handleWithState(handle) {
    await handle(state)
  }

  async loadIndexState() {
    return state.indexState
  }

  async updateIndexState(stateObj, block) {
    stateObj.indexState.blockNumber = block.blockNumber
    stateObj.indexState.blockHash = block.blockHash
  }
}

module.exports = ObjectActionHandler
