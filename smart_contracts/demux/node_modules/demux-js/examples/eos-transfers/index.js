const {
  readers: { eos: { NodeosActionReader } },
  watchers: { BaseActionWatcher },
} = require("../../dist/")
const ObjectActionHandler = require("./ObjectActionHandler")
const updaters = require("./updaters")
const effects = require("./effects")

//BaseActionWatcher calls this object's handleBlock method,
//but this is actually inherited from AbstractActionHandler.
const actionHandler = new ObjectActionHandler(
	//these updaters update the state in the ObjectActionHandler
	//in this case it acts as a data filter, but this could theoretically do anything.
  updaters,
	//and the effects enact some kind of processing based on the updated state.
	//typically this would be a database call to store the updated state, but, currently
	//it just logs to the console for simplicity sake.
  effects,
)


//this is just responsible for polling the blocks and ensuring they're valid.
const actionReader = new NodeosActionReader(
  "http://mainnet.eoscalgary.io", // Thanks EOS Calgary!
  0, // Start at most recent blocks
)
//this takes data from the reader, and passes it on to the handler.
//the handler calls handleBlock() on the block
const actionWatcher = new BaseActionWatcher(
  actionReader,
  actionHandler,
  500,
)

actionWatcher.watch()
